import asyncio
from binance import AsyncClient, BinanceSocketManager
from twilio.rest import Client

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã
last_price = None

# Twilio –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TWILIO_ACCOUNT_SID = "–≤–∞—à_account_sid"
TWILIO_AUTH_TOKEN = "–≤–∞—à_auth_token"
TWILIO_PHONE_NUMBER = "–≤–∞—à_twilio_number"
USER_PHONE_NUMBER = "–≤–∞—à_–Ω–æ–º–µ—Ä_–ø–æ–ª—É—á–∞—Ç–µ–ª—è"  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫—É–¥–∞ –±—É–¥–µ—Ç –∑–≤–æ–Ω–æ–∫

API_KEY = "–≤–∞—à_api_key"
API_SECRET = "–≤–∞—à_api_secret"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞
def make_call(message):
    client = Client(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)
    call = client.calls.create(
        to=USER_PHONE_NUMBER,
        from_=TWILIO_PHONE_NUMBER,
        twiml=f"<Response><Say>{message}</Say></Response>"
    )
    print(f"–ó–≤–æ–Ω–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω: SID {call.sid}")

async def monitor_price(asset, threshold, user_id, context):
    global last_price
    try:
        client = await AsyncClient.create(API_KEY, API_SECRET)
        bsm = BinanceSocketManager(client)
        ts = bsm.trade_socket(asset)  # WebSocket for asset price tracking

        async with ts as tscm:
            print("Monitoring prices...")
            async for msg in tscm:
                current_price = float(msg['p'])

                if last_price is None:
                    last_price = current_price
                    print(f"Initial price recorded: {last_price}")
                    continue

                price_change = ((current_price - last_price) / last_price) * 100
                print(f"Current price: {current_price}, Change: {price_change:.2f}%")

                if abs(price_change) >= threshold:
                    alert_message = f"üö® Price Alert üö®\n{asset} changed by {price_change:.2f}%!"
                    print(alert_message)
                    make_call(alert_message)  # Call user
                    await context.bot.send_message(chat_id=user_id, text=alert_message)
                    last_price = current_price  # Update last price
                await asyncio.sleep(1)
                    
    except Exception as e:
        error_message = f"Error connecting to Binance: {e}"
        print(error_message)
        await context.bot.send_message(chat_id=user_id, text=error_message)
        return error_message  # Return the error message as a string